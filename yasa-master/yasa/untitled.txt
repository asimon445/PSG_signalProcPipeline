from scipy.stats import zscore
from scipy.signal import welch
import yasa
import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as signal
import seaborn as sns
import pandas as pd
sns.set(font_scale=1.2)
import mne
import glob
from scipy.special import erf
import datetime
import csv
import os

PATH = '/Users/ajsimon/Dropbox (Personal)/Data/Overnight PSG/data/preprocessed/'

#create list of PSG files
FILES = glob.glob(PATH + '*.fif')
FILES.sort()

#create list of hypnogram files  
HYPNO = glob.glob(PATH + '*.csv')
HYPNO.sort()

# this is for indexing the last '/' in the path so that we can pull the filename easily for each participant
sep = '/'
def find(PATH, sep):
    return [i for i, ltr in enumerate(PATH) if ltr == sep]

pathsep = list(find(PATH,sep))
pathsep = pathsep[len(pathsep)-1]

sf = 100.



#format output header  -- spectral power for NREM stages
preSleepPow = np.zeros((len(FILES)+1,43), dtype=np.int)
preSleepPow = preSleepPow.astype('U20')

preSleepPow[0,0] = 'Subject'
preSleepPow[0,1] = 'F3 low freq SO'
preSleepPow[0,2] = 'F3 Delta'
preSleepPow[0,3] = 'F3 theta'
preSleepPow[0,4] = 'F3 alpha'
preSleepPow[0,5] = 'F3 sigma'
preSleepPow[0,6] = 'F3 beta'
preSleepPow[0,7] = 'F3 gamma'
preSleepPow[0,8] = 'F4 low freq SO'
preSleepPow[0,9] = 'F4 Delta'
preSleepPow[0,10] = 'F4 theta'
preSleepPow[0,11] = 'F4 alpha'
preSleepPow[0,12] = 'F4 sigma'
preSleepPow[0,13] = 'F4 beta'
preSleepPow[0,14] = 'F4 gamma'
preSleepPow[0,15] = 'C3 low freq SO'
preSleepPow[0,16] = 'C3 Delta'
preSleepPow[0,17] = 'C3 theta'
preSleepPow[0,18] = 'C3 alpha'
preSleepPow[0,19] = 'C3 sigma'
preSleepPow[0,20] = 'C3 beta'
preSleepPow[0,21] = 'C3 gamma'
preSleepPow[0,22] = 'C4 low freq SO'
preSleepPow[0,23] = 'C4 Delta'
preSleepPow[0,24] = 'C4 theta'
preSleepPow[0,25] = 'C4 alpha'
preSleepPow[0,26] = 'C4 sigma'
preSleepPow[0,27] = 'C4 beta'
preSleepPow[0,28] = 'C4 gamma'
preSleepPow[0,29] = 'O1 low freq SO'
preSleepPow[0,30] = 'O1 Delta'
preSleepPow[0,31] = 'O1 theta'
preSleepPow[0,32] = 'O1 alpha'
preSleepPow[0,33] = 'O1 sigma'
preSleepPow[0,34] = 'O1 beta'
preSleepPow[0,35] = 'O1 gamma'
preSleepPow[0,36] = 'O2 low freq SO'
preSleepPow[0,37] = 'O2 Delta'
preSleepPow[0,38] = 'O2 theta'
preSleepPow[0,39] = 'O2 alpha'
preSleepPow[0,40] = 'O2 sigma'
preSleepPow[0,41] = 'O2 beta'
preSleepPow[0,42] = 'O2 gamma'




#format output header  -- spectral power for NREM stages
duringSleepPow = np.zeros((len(FILES)+1,43), dtype=np.int)
duringSleepPow = duringSleepPow.astype('U20')

duringSleepPow[0,0] = 'Subject'
duringSleepPow[0,1] = 'F3 low freq SO'
duringSleepPow[0,2] = 'F3 Delta'
duringSleepPow[0,3] = 'F3 theta'
duringSleepPow[0,4] = 'F3 alpha'
duringSleepPow[0,5] = 'F3 sigma'
duringSleepPow[0,6] = 'F3 beta'
duringSleepPow[0,7] = 'F3 gamma'
duringSleepPow[0,8] = 'F4 low freq SO'
duringSleepPow[0,9] = 'F4 Delta'
duringSleepPow[0,10] = 'F4 theta'
duringSleepPow[0,11] = 'F4 alpha'
duringSleepPow[0,12] = 'F4 sigma'
duringSleepPow[0,13] = 'F4 beta'
duringSleepPow[0,14] = 'F4 gamma'
duringSleepPow[0,15] = 'C3 low freq SO'
duringSleepPow[0,16] = 'C3 Delta'
duringSleepPow[0,17] = 'C3 theta'
duringSleepPow[0,18] = 'C3 alpha'
duringSleepPow[0,19] = 'C3 sigma'
duringSleepPow[0,20] = 'C3 beta'
duringSleepPow[0,21] = 'C3 gamma'
duringSleepPow[0,22] = 'C4 low freq SO'
duringSleepPow[0,23] = 'C4 Delta'
duringSleepPow[0,24] = 'C4 theta'
duringSleepPow[0,25] = 'C4 alpha'
duringSleepPow[0,26] = 'C4 sigma'
duringSleepPow[0,27] = 'C4 beta'
duringSleepPow[0,28] = 'C4 gamma'
duringSleepPow[0,29] = 'O1 low freq SO'
duringSleepPow[0,30] = 'O1 Delta'
duringSleepPow[0,31] = 'O1 theta'
duringSleepPow[0,32] = 'O1 alpha'
duringSleepPow[0,33] = 'O1 sigma'
duringSleepPow[0,34] = 'O1 beta'
duringSleepPow[0,35] = 'O1 gamma'
duringSleepPow[0,36] = 'O2 low freq SO'
duringSleepPow[0,37] = 'O2 Delta'
duringSleepPow[0,38] = 'O2 theta'
duringSleepPow[0,39] = 'O2 alpha'
duringSleepPow[0,40] = 'O2 sigma'
duringSleepPow[0,41] = 'O2 beta'
duringSleepPow[0,42] = 'O2 gamma'


## initialize for loop
for f, file in enumerate(FILES):

    if (f >41):
        PSG_fnum = FILES[f][np.s_[pathsep+1:pathsep+6]]
        Hyp_fnum= HYPNO[f][np.s_[pathsep+1:pathsep+6]]

            # make sure that the participant numbers between the PSG file and the hypnogram file for iteration 'f' are the same
        if PSG_fnum == Hyp_fnum:

            eeg = mne.io.read_raw_fif(FILES[f], preload=True)
            data = eeg.get_data() 
            data = data*1000000
            
            channels = eeg.ch_names
            
            sf = 100.
            times = np.arange(data.size) / sf
            
            hypnogram = []
            hypnogram = np.loadtxt(fname = HYPNO[f],dtype = 'str',delimiter = ',')  
            hypnogram = hypnogram.astype('U3')
            
            for r in range(len(hypnogram)):
                if hypnogram[r] == '- 1':
                    hypnogram[r] = '-1'
                elif hypnogram[r] == '2 1':
                    hypnogram[r] = '2'
                elif hypnogram[r] == '-':
                    hypnogram[r] = '-1'
                    
            
            where_sleep = np.isin(hypnogram, ['1','2','3','4'])  # True if sample is in any sleep stage, False otherwise
            sleep_ix = np.where(where_sleep)    #get a vector of sleep indeces so that I can split the night into before and after initially falling asleep
            sleep_ix = np.transpose(sleep_ix)
            begin_sleep = sleep_ix[0][0]
            end_sleep = sleep_ix[len(sleep_ix)-1][0]
            
            before_sleep_hypno = hypnogram[0:begin_sleep]
            during_sleep_hypno = hypnogram[begin_sleep:end_sleep]
            
            before_sleep_data = data[:,0:begin_sleep]
            during_sleep_data = data[:,begin_sleep:end_sleep]
            
            where_pre_sleep_wakes = np.isin(before_sleep_hypno, ['0'])  
            where_during_sleep_wakes = np.isin(during_sleep_hypno, ['0']) 
            
            data_pre_sleep = before_sleep_data[:, where_pre_sleep_wakes]
            data_during_sleep = during_sleep_data[:, where_during_sleep_wakes]
            
            
            if len(data_pre_sleep[1]) > 0:   #did they go to sleep at all?
                win = int(4 * sf)  # Window size is set to 4 seconds
                presleep_freqs, presleep_psd = welch(data_pre_sleep, sf, nperseg=win, average='median')  # Works with single or multi-channel data, freq bins are 0.25 Hz

                presleep_df = yasa.bandpower_from_psd(presleep_psd, presleep_freqs, ch_names=channels, bands=[(0.5, 1, 'LF SW'),(1, 4, 'Delta'),(4, 8, 'theta'),(8, 12, 'alpha'),(12, 15, 'sigma'),(15, 30, 'beta'),(30, 50, 'gamma')], relative=False)

                duringsleep_freqs, duringsleep_psd = welch(data_during_sleep, sf, nperseg=win, average='median')  # Works with single or multi-channel data, freq bins are 0.25 Hz

                duringsleep_df = yasa.bandpower_from_psd(duringsleep_psd, duringsleep_freqs, ch_names=channels, bands=[(0.5, 1, 'LF SW'),(1, 4, 'Delta'),(4, 8, 'theta'),(8, 12, 'alpha'),(12, 15, 'sigma'),(15, 30, 'beta'),(30, 50, 'gamma')], relative=False)


                    #pull power stats from stage 2 and 3 and store them
                preSleepPow[f+1,0] = Hyp_fnum

                    #F3
                preSleepPow[f+1,1] = presleep_df.iloc[0,1]
                preSleepPow[f+1,2] = presleep_df.iloc[0,2]
                preSleepPow[f+1,3] = presleep_df.iloc[0,3]
                preSleepPow[f+1,4] = presleep_df.iloc[0,4]
                preSleepPow[f+1,5] = presleep_df.iloc[0,5]
                preSleepPow[f+1,6] = presleep_df.iloc[0,6]
                preSleepPow[f+1,7] = presleep_df.iloc[0,7]

                    #F4
                preSleepPow[f+1,8] = presleep_df.iloc[1,1]
                preSleepPow[f+1,9] = presleep_df.iloc[1,2]
                preSleepPow[f+1,10] = presleep_df.iloc[1,3]
                preSleepPow[f+1,11] = presleep_df.iloc[1,4]
                preSleepPow[f+1,12] = presleep_df.iloc[1,5]
                preSleepPow[f+1,13] = presleep_df.iloc[1,6]
                preSleepPow[f+1,14] = presleep_df.iloc[1,7]

                    #C3
                preSleepPow[f+1,15] = presleep_df.iloc[2,1]
                preSleepPow[f+1,16] = presleep_df.iloc[2,2]
                preSleepPow[f+1,17] = presleep_df.iloc[2,3]
                preSleepPow[f+1,18] = presleep_df.iloc[2,4]
                preSleepPow[f+1,19] = presleep_df.iloc[2,5]
                preSleepPow[f+1,20] = presleep_df.iloc[2,6]
                preSleepPow[f+1,21] = presleep_df.iloc[2,7]

                    #C4
                preSleepPow[f+1,22] = presleep_df.iloc[3,1]
                preSleepPow[f+1,23] = presleep_df.iloc[3,2]
                preSleepPow[f+1,24] = presleep_df.iloc[3,3]
                preSleepPow[f+1,25] = presleep_df.iloc[3,4]
                preSleepPow[f+1,26] = presleep_df.iloc[3,5]
                preSleepPow[f+1,27] = presleep_df.iloc[3,6]
                preSleepPow[f+1,28] = presleep_df.iloc[3,7]

                    #O1
                preSleepPow[f+1,29] = presleep_df.iloc[4,1]
                preSleepPow[f+1,30] = presleep_df.iloc[4,2]
                preSleepPow[f+1,31] = presleep_df.iloc[4,3]
                preSleepPow[f+1,32] = presleep_df.iloc[4,4]
                preSleepPow[f+1,33] = presleep_df.iloc[4,5]
                preSleepPow[f+1,34] = presleep_df.iloc[4,6]
                preSleepPow[f+1,35] = presleep_df.iloc[4,7]

                    #O2
                preSleepPow[f+1,36] = presleep_df.iloc[5,1]
                preSleepPow[f+1,37] = presleep_df.iloc[5,2]
                preSleepPow[f+1,38] = presleep_df.iloc[5,3]
                preSleepPow[f+1,39] = presleep_df.iloc[5,4]
                preSleepPow[f+1,40] = presleep_df.iloc[5,5]
                preSleepPow[f+1,41] = presleep_df.iloc[5,6]
                preSleepPow[f+1,42] = presleep_df.iloc[5,7]



                    #pull power stats from stage 2 and 3 and store them
                duringSleepPow[f+1,0] = Hyp_fnum

                    #F3
                duringSleepPow[f+1,1] = duringsleep_df.iloc[0,1]
                duringSleepPow[f+1,2] = duringsleep_df.iloc[0,2]
                duringSleepPow[f+1,3] = duringsleep_df.iloc[0,3]
                duringSleepPow[f+1,4] = duringsleep_df.iloc[0,4]
                duringSleepPow[f+1,5] = duringsleep_df.iloc[0,5]
                duringSleepPow[f+1,6] = duringsleep_df.iloc[0,6]
                duringSleepPow[f+1,7] = duringsleep_df.iloc[0,7]

                    #F4
                duringSleepPow[f+1,8] = duringsleep_df.iloc[1,1]
                duringSleepPow[f+1,9] = duringsleep_df.iloc[1,2]
                duringSleepPow[f+1,10] = duringsleep_df.iloc[1,3]
                duringSleepPow[f+1,11] = duringsleep_df.iloc[1,4]
                duringSleepPow[f+1,12] = duringsleep_df.iloc[1,5]
                duringSleepPow[f+1,13] = duringsleep_df.iloc[1,6]
                duringSleepPow[f+1,14] = duringsleep_df.iloc[1,7]

                    #C3
                duringSleepPow[f+1,15] = duringsleep_df.iloc[2,1]
                duringSleepPow[f+1,16] = duringsleep_df.iloc[2,2]
                duringSleepPow[f+1,17] = duringsleep_df.iloc[2,3]
                duringSleepPow[f+1,18] = duringsleep_df.iloc[2,4]
                duringSleepPow[f+1,19] = duringsleep_df.iloc[2,5]
                duringSleepPow[f+1,20] = duringsleep_df.iloc[2,6]
                duringSleepPow[f+1,21] = duringsleep_df.iloc[2,7]

                    #C4
                duringSleepPow[f+1,22] = duringsleep_df.iloc[3,1]
                duringSleepPow[f+1,23] = duringsleep_df.iloc[3,2]
                duringSleepPow[f+1,24] = duringsleep_df.iloc[3,3]
                duringSleepPow[f+1,25] = duringsleep_df.iloc[3,4]
                duringSleepPow[f+1,26] = duringsleep_df.iloc[3,5]
                duringSleepPow[f+1,27] = duringsleep_df.iloc[3,6]
                duringSleepPow[f+1,28] = duringsleep_df.iloc[3,7]

                    #O1
                duringSleepPow[f+1,29] = duringsleep_df.iloc[4,1]
                duringSleepPow[f+1,30] = duringsleep_df.iloc[4,2]
                duringSleepPow[f+1,31] = duringsleep_df.iloc[4,3]
                duringSleepPow[f+1,32] = duringsleep_df.iloc[4,4]
                duringSleepPow[f+1,33] = duringsleep_df.iloc[4,5]
                duringSleepPow[f+1,34] = duringsleep_df.iloc[4,6]
                duringSleepPow[f+1,35] = duringsleep_df.iloc[4,7]

                    #O2
                duringSleepPow[f+1,36] = duringsleep_df.iloc[5,1]
                duringSleepPow[f+1,37] = duringsleep_df.iloc[5,2]
                duringSleepPow[f+1,38] = duringsleep_df.iloc[5,3]
                duringSleepPow[f+1,39] = duringsleep_df.iloc[5,4]
                duringSleepPow[f+1,40] = duringsleep_df.iloc[5,5]
                duringSleepPow[f+1,41] = duringsleep_df.iloc[5,6]
                duringSleepPow[f+1,42] = duringsleep_df.iloc[5,7]
            
            
            
pre_outfile = open('/Users/ajsimon/Dropbox (Personal)/Data/Overnight PSG/data/' + 'Wake before sleep TF.csv','w')
with pre_outfile:
    writer = csv.writer(pre_outfile,delimiter=',')
    writer.writerows(preSleepPow)
    
    
during_outfile = open('/Users/ajsimon/Dropbox (Personal)/Data/Overnight PSG/data/' + 'Wake midnight TF.csv','w')
with during_outfile:
    writer = csv.writer(during_outfile,delimiter=',')
    writer.writerows(duringSleepPow)